{"version":3,"sources":["congratulations.gif","Problems.js","Landing.js","App.js","reportWebVitals.js","index.js"],"names":["Problems","type","problemsList","useState","problemList","setProblemList","correctCount","setCorrectCount","typeConverter","subtraction","addition","multiplication","division","handleChange","e","values","target","id","input","value","handleCheckAnswer","convertToNum","parseInt","answer","correct","className","length","map","problem","idx","first","second","onChange","onClick","disabled","src","endGif","alt","Landing","App","setType","digits","setDigits","number","setNumber","problems","setProblems","numConverter","five","ten","twenty","thirty","digitConverer","one","two","three","handleTypeSelection","handleDigitsSelection","handleNumberSelection","subtract","a","b","multiply","divide","window","location","reload","tempProblemList","numberInt","i","ready","total","Math","floor","random","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c0de8275.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/congratulations.ca0963d5.gif\";","import React, { useState } from \"react\";\r\nimport endGif from './congratulations.gif';\r\nconst Problems = ({ type, problemsList }) => {\r\n  const [problemList, setProblemList] = useState(problemsList);\r\n  const [correctCount, setCorrectCount] = useState(0);\r\n\r\n  const typeConverter = {\r\n    subtraction: \"-\",\r\n    addition: \"+\",\r\n    multiplication: \"x\",\r\n    division: \"/\",\r\n  };\r\n\r\n  const handleChange = (e) => {\r\n    let values = [...problemList];\r\n    values[e.target.id].input = e.target.value;\r\n    setProblemList(values);\r\n  };\r\n\r\n  const handleCheckAnswer = (e) => {\r\n    let convertToNum = parseInt(problemList[e.target.id].input);\r\n    if (problemList[e.target.id].answer === convertToNum) {\r\n      let values = [...problemList];\r\n      values[e.target.id].correct = true;\r\n      setProblemList(values);\r\n      setCorrectCount(correctCount + 1);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <section id='problem-section'>\r\n      <div className='problem-score'>\r\n        <span>\r\n          Current Score: {correctCount} / {problemList.length}\r\n        </span>\r\n      </div>\r\n\r\n      {correctCount !== problemList.length ? (<div className='problems'>\r\n        {problemList.map((problem, idx) => (\r\n          <div\r\n            className={`problem-container ${problem.correct && \"correct\"}`}\r\n            key={idx}\r\n          >\r\n            <div className='problem'>{problem.first}</div>\r\n            <div className='problem bottom-border'>\r\n              {typeConverter[type]}\r\n              {problem.second}\r\n            </div>\r\n            {problem.correct === false ? (\r\n              <input\r\n                className={`problem-input ${problem.correct && \"correct\"}`}\r\n                type='number'\r\n                value={problemList[idx].input}\r\n                onChange={handleChange}\r\n                id={idx}\r\n              />\r\n            ) : (\r\n              <div className='correct lock-input'>{problem.answer}</div>\r\n            )}\r\n            <button\r\n              className='btn bs check-answer'\r\n              onClick={handleCheckAnswer}\r\n              id={idx} disabled={`${problem.correct === true ? \"disabled\" : \"\"}`}\r\n            >\r\n              Check Answer\r\n            </button>\r\n          </div>\r\n        ))}\r\n      </div>) : (<div id=\"end-section\">\r\n        <img className=\"end-gif\" src={endGif} alt=\"Congratulations\"/>\r\n\r\n      </div>)}\r\n      \r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Problems;\r\n","import React from 'react'\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <div>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Landing","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Problems from \"./Problems\";\nimport Landing from \"./Landing\";\n\nconst App = () => {\n  const [type, setType] = useState(\"subtraction\");\n  const [digits, setDigits] = useState(\"one\");\n  const [number, setNumber] = useState(\"five\");\n  const [problemList, setProblemList] = useState([]);\n  const [problems, setProblems] = useState(false);\n\n  const numConverter = {\n    five: 5,\n    ten: 10,\n    twenty: 20,\n    thirty: 30,\n  };\n\n  const digitConverer = {\n    one: 9,\n    two: 99,\n    three: 999,\n  };\n\n  const handleTypeSelection = (e) => {\n    setType(e.target.id);\n  };\n\n  const handleDigitsSelection = (e) => {\n    setDigits(e.target.id);\n  };\n\n  const handleNumberSelection = (e) => {\n    setNumber(e.target.id);\n  };\n\n  const add = (a, b) => {\n    return a + b;\n  };\n\n  const subtract = (a, b) => {\n    return a - b;\n  };\n\n  const multiply = (a, b) => {\n    return a * b;\n  };\n\n  const divide = (a, b) => {\n    return a / b;\n  };\n\n  const handleGenerateProblems = () => {\n    const tempProblemList = [];\n    const numberInt = numConverter[number];\n\n    for (let i = 0; i < numberInt; i++) {\n      let ready = false;\n      let first, second;\n      let total = 0;\n      if (type === \"division\") {\n        while (ready === false) {\n          first = Math.floor(Math.random() * digitConverer[digits]);\n          second = Math.floor(Math.random() * 10 + 2);\n          if (second > first) {\n            [first, second] = [second, first];\n          }\n\n          if (first % second === 0) {\n            ready = true;\n          }\n        }\n      } else {\n          while (ready ===false){\n            first = Math.floor(Math.random() * digitConverer[digits]);\n            second = Math.floor(Math.random() * digitConverer[digits]);\n            \n            if(first && second !== 0){\n              ready= true\n            }\n          }\n          if (second > first) {\n            [first, second] = [second, first];\n          }\n\n      }\n\n      switch (type) {\n        case \"addition\":\n          total = add(first, second);\n          break;\n        case \"subtraction\":\n          total = subtract(first, second);\n          break;\n        case \"multiplication\":\n          total = multiply(first, second);\n          break;\n        case \"division\":\n          total = divide(first, second);\n          break;\n        default:\n          break;\n      }\n\n      tempProblemList.push({\n        id: i,\n        first: first,\n        second: second,\n        answer: total,\n        correct: false,\n        input: \"\",\n      });\n    }\n\n    setProblemList(tempProblemList);\n    setProblems(true);\n  };\n\n  const handleResetData = () => {\n    window.location.reload(false);\n  };\n\n  return (\n    <div className='App'>\n      {problems ? (\n        <nav>\n          <ul>\n            <li>\n              <button className='bs btn-reset' onClick={handleResetData}>\n                Try More Problems\n              </button>\n            </li>\n          </ul>\n        </nav>\n      ) : (\n        <h1>Unlimited Math Problems</h1>\n      )}\n\n      {problems ? (\n        <Problems\n          type={type}\n          digits={digits}\n          number={numConverter[number]}\n          problemsList={problemList}\n        />\n      ) : (\n        <div>\n          <section id='selection-section'>\n            <div id='selection-type'>\n              <h2>Select type of problem</h2>\n              <div className='type-container'>\n                <span>\n                  <button\n                    id='subtraction'\n                    className={`bs btn ${\n                      type === \"subtraction\" ? \"active\" : \"\"\n                    }`}\n                    onClick={handleTypeSelection}\n                  >\n                    Subtraction\n                  </button>\n                </span>\n\n                <span>\n                  <button\n                    id='addition'\n                    className={`bs btn ${type === \"addition\" ? \"active\" : \"\"}`}\n                    onClick={handleTypeSelection}\n                  >\n                    Addition\n                  </button>\n                </span>\n\n                <span>\n                  <button\n                    id='multiplication'\n                    className={`bs btn ${\n                      type === \"multiplication\" ? \"active\" : \"\"\n                    }`}\n                    onClick={handleTypeSelection}\n                  >\n                    Multiplication\n                  </button>\n                </span>\n\n                <span>\n                  <button\n                    id='division'\n                    className={`bs btn ${type === \"division\" ? \"active\" : \"\"}`}\n                    onClick={handleTypeSelection}\n                  >\n                    Division\n                  </button>\n                </span>\n              </div>\n            </div>\n\n            <div id='selection-digits'>\n              <h2>Select how many digits</h2>\n              <div className='type-container-three'>\n                <span>\n                  <button\n                    id='one'\n                    className={`bs btn ${digits === \"one\" ? \"active\" : \"\"}`}\n                    onClick={handleDigitsSelection}\n                  >\n                    One\n                  </button>\n                </span>\n                <span>\n                  <button\n                    id='two'\n                    className={`bs btn ${digits === \"two\" ? \"active\" : \"\"}`}\n                    onClick={handleDigitsSelection}\n                  >\n                    Two\n                  </button>\n                </span>\n                <span>\n                  <button\n                    id='three'\n                    className={`bs btn ${digits === \"three\" ? \"active\" : \"\"}`}\n                    onClick={handleDigitsSelection}\n                  >\n                    Three\n                  </button>\n                </span>\n              </div>\n            </div>\n\n            <div id='selection-number'>\n            <h2>How many problems?</h2>\n              <div className='type-container'>\n              <button\n                id='five'\n                className={`btn ${number === \"five\" ? \"active\" : \"\"}`}\n                onClick={handleNumberSelection}\n              >\n                Five\n              </button>\n              <button\n                id='ten'\n                className={`btn ${number === \"ten\" ? \"active\" : \"\"}`}\n                onClick={handleNumberSelection}\n              >\n                Ten\n              </button>\n              <button\n                id='twenty'\n                className={`btn ${number === \"twenty\" ? \"active\" : \"\"}`}\n                onClick={handleNumberSelection}\n              >\n                Twenty\n              </button>\n              <button\n                id='thirty'\n                className={`btn ${number === \"thirty\" ? \"active\" : \"\"}`}\n                onClick={handleNumberSelection}\n              >\n                Thirty\n              </button>\n              </div>\n            </div>\n\n            <button className=\"btn btn-generate\" id='generate-problems' onClick={handleGenerateProblems}>\n              Generate Problems\n            </button>\n          </section>\n          <Landing />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}