{"version":3,"sources":["Problems.js","Landing.js","App.js","reportWebVitals.js","index.js"],"names":["Problems","type","problemsList","useState","problemList","setProblemList","correctCount","setCorrectCount","typeConverter","handleChange","e","values","target","id","input","value","handleCheckAnswer","convertToNum","parseInt","answer","correct","className","length","map","problem","idx","first","second","onChange","onClick","Landing","App","setType","digits","setDigits","number","setNumber","problems","setProblems","numConverter","five","ten","twenty","thirty","digitConverer","one","two","three","handleTypeSelection","handleDigitsSelection","handleNumberSelection","subtract","a","b","multiply","divide","window","location","reload","tempProblemList","numberInt","i","ready","total","Math","floor","random","push","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.882fea2c.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\n\r\n\r\n\r\nconst Problems = ({type, problemsList}) => {\r\n  const [problemList, setProblemList] = useState(problemsList)\r\n  const [correctCount, setCorrectCount] =useState(0)\r\n\r\n  const typeConverter = {\r\n    'subtraction': '-',\r\n    'addition': '+',\r\n    'multiplication':'x',\r\n    'division': '/'\r\n  }\r\n\r\n  const handleChange = (e) => {\r\n    let values = [...problemList];\r\n    values[e.target.id].input = e.target.value\r\n    setProblemList(values)\r\n  }\r\n \r\n  const handleCheckAnswer = (e) => {\r\n    let convertToNum = parseInt(problemList[e.target.id].input)\r\n    if(problemList[e.target.id].answer === convertToNum){\r\n      let values = [...problemList];\r\n      values[e.target.id].correct = true\r\n      setProblemList(values)\r\n      setCorrectCount(correctCount +1)\r\n    } \r\n\r\n  }\r\n    \r\n  return (\r\n    <section id=\"problem-section\">\r\n    <div className=\"problem-score\">\r\n      <span>Current Score: {correctCount} / {problemList.length}</span>\r\n    </div>\r\n\r\n    <div className=\"problems\">\r\n      {problemList.map((problem, idx) => (\r\n        <div className={`problem-container ${problem.correct && \"correct\"}`} key={idx}>\r\n          <div className=\"problem\">{problem.first}</div>\r\n          <div className=\"problem bottom-border\">{typeConverter[type]}{problem.second}</div>\r\n          <input className={`problem-input ${problem.correct && \"correct\"}`} type=\"number\" value={problemList[idx].input} onChange={handleChange} id={idx}/>\r\n          <button className=\"btn bs check-answer\" onClick={handleCheckAnswer} id={idx}>Check Answer</button>\r\n        </div>\r\n      ))}\r\n    </div>\r\n\r\n    </section>\r\n  )\r\n}\r\n\r\nexport default Problems\r\n","import React from 'react'\r\n\r\nconst Landing = () => {\r\n  return (\r\n    <div>\r\n    \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Landing","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Problems from \"./Problems\";\nimport Landing from \"./Landing\";\n\nconst App = () => {\n  const [type, setType] = useState(\"subtraction\");\n  const [digits, setDigits] = useState(\"one\");\n  const [number, setNumber] = useState(\"five\");\n  const [problemList, setProblemList] = useState([]);\n  const [problems, setProblems] = useState(false);\n\n  const numConverter = {\n    five: 5,\n    ten: 10,\n    twenty: 20,\n    thirty: 30,\n  };\n\n  const digitConverer = {\n    one: 9,\n    two: 99,\n    three: 999,\n  };\n\n  const handleTypeSelection = (e) => {\n    setType(e.target.id);\n  };\n\n  const handleDigitsSelection = (e) => {\n    setDigits(e.target.id);\n  };\n\n  const handleNumberSelection = (e) => {\n    setNumber(e.target.id);\n  };\n\n  const add = (a, b) => {\n    return a + b;\n  };\n\n  const subtract = (a, b) => {\n    return a - b;\n  };\n\n  const multiply = (a, b) => {\n    return a * b;\n  };\n\n  const divide = (a, b) => {\n    return a / b;\n  };\n\n  const handleGenerateProblems = () => {\n    const tempProblemList = [];\n    const numberInt = numConverter[number];\n\n    for (let i = 0; i < numberInt; i++) {\n      let ready = false;\n      let first, second;\n      let total = 0;\n      if (type === \"division\") {\n        while (ready === false) {\n          first = Math.floor(Math.random() * digitConverer[digits]);\n          second = Math.floor(Math.random() * 10 + 2);\n          if (second > first) {\n            [first, second] = [second, first];\n          }\n\n          if (first % second === 0) {\n            ready = true;\n          }\n        }\n      } else {\n        first = Math.floor(Math.random() * digitConverer[digits]);\n        second = Math.floor(Math.random() * digitConverer[digits]);\n        if (second > first) {\n          [first, second] = [second, first];\n        }\n      }\n\n      switch (type) {\n        case \"addition\":\n          total = add(first, second);\n          break;\n        case \"subtraction\":\n          total = subtract(first, second);\n          break;\n        case \"multiplication\":\n          total = multiply(first, second);\n          break;\n        case \"division\":\n          total = divide(first, second);\n          break;\n        default:\n          break;\n      }\n\n      tempProblemList.push({\n        id: i,\n        first: first,\n        second: second,\n        answer: total,\n        correct: false,\n        input: \"\",\n      });\n    }\n\n    setProblemList(tempProblemList);\n    setProblems(true);\n  };\n\n  const handleResetData = () => {\n    window.location.reload(false);\n  };\n\n  return (\n    <div className='App'>\n      {problems ? (\n        <nav>\n          <ul>\n            <li>\n              <button className='bs btn-reset btn' onClick={handleResetData}>\n                Try More Problems\n              </button>\n            </li>\n          </ul>\n        </nav>\n      ) : (\n        <h1>Unlimited Math Problems</h1>\n      )}\n\n      {problems ? (\n        <Problems\n          type={type}\n          digits={digits}\n          number={numConverter[number]}\n          problemsList={problemList}\n        />\n      ) : (\n        <div>\n          <section id='selection-section'>\n            <div id='selection-type'>\n              <h2>Select type of problem</h2>\n              <div className='type-container'>\n                <span>\n                  <button\n                    id='subtraction'\n                    className={`bs btn ${\n                      type === \"subtraction\" ? \"active\" : \"\"\n                    }`}\n                    onClick={handleTypeSelection}\n                  >\n                    Subtraction\n                  </button>\n                </span>\n\n                <span>\n                  <button\n                    id='addition'\n                    className={`bs btn ${type === \"addition\" ? \"active\" : \"\"}`}\n                    onClick={handleTypeSelection}\n                  >\n                    Addition\n                  </button>\n                </span>\n\n                <span>\n                  <button\n                    id='multiplication'\n                    className={`bs btn ${\n                      type === \"multiplication\" ? \"active\" : \"\"\n                    }`}\n                    onClick={handleTypeSelection}\n                  >\n                    Multiplication\n                  </button>\n                </span>\n\n                <span>\n                  <button\n                    id='division'\n                    className={`bs btn ${type === \"division\" ? \"active\" : \"\"}`}\n                    onClick={handleTypeSelection}\n                  >\n                    Division\n                  </button>\n                </span>\n              </div>\n            </div>\n\n            <div id='selection-digits'>\n              <h2>Select how many digits</h2>\n              <div className='type-container-three'>\n                <span>\n                  <button\n                    id='one'\n                    className={`bs btn ${digits === \"one\" ? \"active\" : \"\"}`}\n                    onClick={handleDigitsSelection}\n                  >\n                    One\n                  </button>\n                </span>\n                <span>\n                  <button\n                    id='two'\n                    className={`bs btn ${digits === \"two\" ? \"active\" : \"\"}`}\n                    onClick={handleDigitsSelection}\n                  >\n                    Two\n                  </button>\n                </span>\n                <span>\n                  <button\n                    id='three'\n                    className={`bs btn ${digits === \"three\" ? \"active\" : \"\"}`}\n                    onClick={handleDigitsSelection}\n                  >\n                    Three\n                  </button>\n                </span>\n              </div>\n            </div>\n\n            <div id='selection-number'>\n            <h2>How many problems?</h2>\n              <div className='type-container'>\n              <button\n                id='five'\n                className={`btn ${number === \"five\" ? \"active\" : \"\"}`}\n                onClick={handleNumberSelection}\n              >\n                Five\n              </button>\n              <button\n                id='ten'\n                className={`btn ${number === \"ten\" ? \"active\" : \"\"}`}\n                onClick={handleNumberSelection}\n              >\n                Ten\n              </button>\n              <button\n                id='twenty'\n                className={`btn ${number === \"twenty\" ? \"active\" : \"\"}`}\n                onClick={handleNumberSelection}\n              >\n                Twenty\n              </button>\n              <button\n                id='thirty'\n                className={`btn ${number === \"thirty\" ? \"active\" : \"\"}`}\n                onClick={handleNumberSelection}\n              >\n                Thirty\n              </button>\n              </div>\n            </div>\n\n            <button className=\"btn btn-generate\" id='generate-problems' onClick={handleGenerateProblems}>\n              Generate Problems\n            </button>\n          </section>\n          <Landing />\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}